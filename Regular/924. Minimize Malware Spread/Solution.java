class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        //minInfo: [minNodes, minIndex]
        int[] minInfo = new int[] {graph.length, graph.length};
        
        //calculate interconnectivity of graph
        for (int i = 0; i < graph.length; i++) {
            for (int j = 0; j < i; j++) {
                for (int k = 0; k < graph.length; k++) {
                    if (graph[i][k] == 1 && graph[j][k] == 1) {
                        graph[i][j] = 1;
                        graph[j][i] = 1;
                    }
                }
            }
        }
        for (int i = 0; i < initial.length; i++) {
            minInfo = spreadButIndex(graph, initial, initial[i], minInfo);
        }
        return minInfo[1];
    }
    
    int[] spreadButIndex(int[][] graph, int[] initial, int except, int[] minTilNow) {
        int size = graph.length;
        Map<Integer, Integer> infected = new HashMap<>();
        for (int e : initial) {
            if (e != except) infected.put(e, 1);
        }
        for (int i = 0; i < size; i++) {
            for (int j = 0; j <= i; j++) {
                if (graph[i][j] == 1 && (infected.containsKey(i) || infected.containsKey(j))) {
                    infected.put(j, 1);
                    infected.put(i, 1);
                    if (infected.size() > minTilNow[0]) return minTilNow;
                }
            }
        }
        if (infected.size() == minTilNow[0])
            return new int[] {infected.size(), except > minTilNow[1] ? minTilNow[1] : except};
        else return new int[] {infected.size(), except};
    }
}
